version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.4.8

jobs:
  build:
    docker:
      - image: cimg/php:8.2-browsers  # Using PHP with browser support

    steps:
      - browser-tools/install-browser-tools
      - checkout

      - run:
          name: "Prepare Environment"
          command: |
            sudo apt update
            sudo docker-php-ext-install zip

      - run:
          name: "Create Environment file"
          command: mv .env.testing .env

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.json" }}
            - v1-dependencies-

      - run:
          name: "Install Dependencies"
          command: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      - run:
          name: "Generate App key"
          command: php artisan key:generate

      - run:
          name: "Install Sqlite"  # Install sqlite3 for database testing
          command: |
            sudo apt-get update
            sudo apt-get install -y php-sqlite3
            touch database/database.sqlite
            php artisan migrate --env=testing

      - run:
          name: "Run Unit Tests"  # Run Unit tests
          command: ./vendor/bin/phpunit tests/Unit

      - run:
          name: "Run Feature Tests"  # Run Feature tests
          command: ./vendor/bin/phpunit tests/Feature

      - run:
          name: "Install Dusk and Update ChromeDriver"  # Install and update ChromeDriver for Dusk
          command: |
            composer require --dev laravel/dusk
            php artisan dusk:chrome-driver --detect

      - run:
          name: "Run Laravel Server"  # Start Laravel server in background and log output
          command: |
            php artisan serve --host=0.0.0.0 --port=8001 --env=testing > server.log 2>&1
          background: true

      - run:
          name: "Wait for Laravel Server"  # Wait until the server is fully up
          command: |
            timeout=60
            elapsed=0
            while true; do
              http_status=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8001)
              if [ "$http_status" -eq 200 ]; then
                echo "Server is up and running."
                break
              fi
              if [ "$elapsed" -ge "$timeout" ]; then
                echo "Timeout waiting for Laravel server to start."
                echo "Last HTTP status: $http_status"
                cat server.log  # Print server logs in case of error
                exit 1
              fi
              echo "Waiting for Laravel server... (HTTP status: $http_status)"
              sleep 5
              elapsed=$((elapsed + 5))
            done

      - run:
          name: "Run Browser Tests"  # Run Browser tests with Laravel Dusk
          command: php artisan dusk

      - run:
          name: "Show Laravel Logs"  # Show logs if needed for debugging
          when: on_fail
          command: |
            echo "Contents of storage/logs/laravel.log:"
            cat storage/logs/laravel.log || echo "No Laravel logs found."
