version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.4.8

jobs:
  build:
    docker:
      - image: cimg/php:8.2-browsers  # Using PHP 8.2 with browser support

    steps:
      - browser-tools/install-browser-tools
      - checkout

      - run:
          name: "Create Environment File"
          command: mv .env.testing .env

      - run:
          name: "Show .env File"
          command: |
            echo "Contents of .env file:"
            cat .env

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.json" }}
            - v1-dependencies-

      - run:
          name: "Install Dependencies"
          command: composer install --no-interaction --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - vendor

      - run:
          name: "Generate App Key"
          command: php artisan key:generate

      - run:
          name: "Set Directory Permissions"
          command: sudo chmod -R 0777 storage bootstrap/cache

      - run:
          name: "Install SQLite Extension"
          command: sudo apt-get update && sudo apt-get install -y php-sqlite3

      - run:
          name: "Create Database and Run Migrations"
          command: |
            touch database/database.sqlite
            php artisan migrate --env=testing --force

      - run:
          name: "Run Unit Tests"
          command: ./vendor/bin/phpunit tests/Unit

      - run:
          name: "Run Feature Tests"
          command: ./vendor/bin/phpunit tests/Feature

      - run:
          name: "Install Laravel Dusk and Dusk Updater"
          command: |
            composer require --dev laravel/dusk
            composer require --dev staudenmeir/dusk-updater

      - run:
          name: "Update ChromeDriver"
          command: php artisan dusk:update --detect

      - run:
          name: "Start Laravel Server"
          command: |
            php artisan serve --host=0.0.0.0 --port=8000 --env=testing > storage/logs/server.log 2>&1 &
          background: true

      - run:
          name: "Wait for Laravel Server"
          command: |
            timeout=60
            elapsed=0
            while true; do
              http_status=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8000)
              if [ "$http_status" -eq 200 ]; then
                echo "Server is up and running."
                break
              fi
              if [ "$elapsed" -ge "$timeout" ]; then
                echo "Timeout waiting for Laravel server to start."
                echo "Last HTTP status: $http_status"
                cat storage/logs/server.log  # Print server logs in case of error
                exit 1
              fi
              echo "Waiting for Laravel server... (HTTP status: $http_status)"
              sleep 5
              elapsed=$((elapsed + 5))
            done

      - run:
          name: "Run Dusk Tests"
          command: php artisan dusk --debug -vvv

      - run:
          name: "Show Server Logs"
          when: always
          command: |
            if [ -f storage/logs/server.log ]; then
              echo "Contents of storage/logs/server.log:"
              cat storage/logs/server.log
            else
              echo "No server logs found."
            fi

      - run:
          name: "Show Laravel Logs"
          when: always
          command: |
            if [ -f storage/logs/laravel.log ]; then
              echo "Contents of storage/logs/laravel.log:"
              cat storage/logs/laravel.log
            else
              echo "No Laravel logs found."
            fi
